#!/usr/bin/env lua

-- workspace-labels: simple CLI to manage Aerospace workspace labels used by SketchyBar
-- Usage:
--   workspace-labels set <ID> <LABEL...>
--   workspace-labels clear <ID>
--   workspace-labels clear
--
-- Notes:
-- - After any change, triggers the SketchyBar event 'workspace_labels_changed'.

local function config_dir()
  local xdg = os.getenv("XDG_CONFIG_HOME")
  local home = os.getenv("HOME")
  if xdg and #xdg > 0 then
    return xdg .. "/sketchybar"
  else
    return home .. "/.config/sketchybar"
  end
end

-- Ensure we can require modules from the config directory
package.path = table.concat({
  config_dir() .. "/?.lua",
  config_dir() .. "/?/init.lua",
  package.path,
}, ";")

local ok, WL = pcall(require, "helpers.workspace_labels")
if not ok then
  io.stderr:write("Error: failed to load helpers.workspace_labels: " .. tostring(WL) .. "\n")
  os.exit(1)
end

local function usage()
  io.stderr:write([[Usage:
  workspace-labels set <ID> <LABEL...>
  workspace-labels clear <ID>
  workspace-labels clear
]])
  os.exit(1)
end

local function trigger_refresh()
  -- Fire and forget; if sketchybar is not running this will be a no-op
  os.execute('sketchybar --trigger ' .. WL.event)
end

local cmd = arg[1]
if not cmd then usage() end

if cmd == "set" then
  local id = arg[2]
  if not id or #id == 0 then usage() end
  if not arg[3] then usage() end
  -- Join remaining args to support multi-word labels
  local label_parts = {}
  for i = 3, #arg do table.insert(label_parts, arg[i]) end
  local label = table.concat(label_parts, " ")
  if #label == 0 then usage() end
  local ok2, err = pcall(WL.set_label, id, label)
  if not ok2 then
    io.stderr:write("Error: " .. tostring(err) .. "\n")
    os.exit(1)
  end
  trigger_refresh()
  os.exit(0)
elseif cmd == "clear" then
  local id = arg[2]
  if id and #id > 0 then
    local ok2, err = pcall(WL.clear_label, id)
    if not ok2 then
      io.stderr:write("Error: " .. tostring(err) .. "\n")
      os.exit(1)
    end
  else
    local ok2, err = pcall(WL.clear_all)
    if not ok2 then
      io.stderr:write("Error: " .. tostring(err) .. "\n")
      os.exit(1)
    end
  end
  trigger_refresh()
  os.exit(0)
else
  usage()
end

